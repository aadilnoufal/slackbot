# Install required libraries
!pip install slack_sdk flask pyngrok

# Import libraries
import os
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from flask import Flask, request, Response
from pyngrok import ngrok

# Set up the environment variable for the Slack Bot Token
SLACK_BOT_TOKEN = 'your token'
NGROK_AUTH_TOKEN = '2your tokenSq'  # Add your ngrok auth token here

# Initialize the Flask app and the Slack client
app = Flask(__name__)
client = WebClient(token=SLACK_BOT_TOKEN)

# Predefined responses
FAQ_RESPONSES = {
    "default": "This is a default response for any query.",
    "example question": "This is an answer to an example question."
}

# Function to handle incoming messages
def handle_message(event_data):
    text = event_data['event']['text'].lower()
    channel = event_data['event']['channel']
    
    response = FAQ_RESPONSES.get(text, FAQ_RESPONSES["default"])
    
    try:
        client.chat_postMessage(
            channel=channel,
            text=response
        )
    except SlackApiError as e:
        print(f"Error posting message: {e.response['error']}")

# Define the Flask route to handle Slack events
@app.route('/slack/events', methods=['POST'])
def slack_events():
    event_data = request.json
    
    if "challenge" in event_data:
        return Response(event_data["challenge"], mimetype='text/plain')
    
    if "event" in event_data:
        handle_message(event_data)
    
    return Response("Event received", status=200)

# Run the Flask app
if __name__ == "__main__":
    # Authenticate ngrok
    ngrok.set_auth_token(NGROK_AUTH_TOKEN)

    # Expose the Flask app using ngrok
    public_url = ngrok.connect(5000)
    print(" * ngrok URL:", public_url)
    
    app.run(port=5000)
